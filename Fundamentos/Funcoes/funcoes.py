# Atividades

"""

üß† Atividades: Fun√ß√µes e Escopo de Vari√°veis

1. Crie uma fun√ß√£o que receba dois n√∫meros e retorne a soma deles.
‚Üí Teste a fun√ß√£o com diferentes pares de n√∫meros.

2. Crie uma fun√ß√£o que receba um nome e imprima uma sauda√ß√£o personalizada.
‚Üí Use um argumento padr√£o para o nome ("visitante").

def saudacao(nome="visitante"):
    print(f"Ol√°, {nome}!")

3. Crie uma fun√ß√£o que receba tr√™s n√∫meros e retorne a m√©dia.
‚Üí Use print() para exibir a m√©dia com duas casas decimais.

4. Crie uma fun√ß√£o chamada par_ou_impar que receba um n√∫mero e diga se ele √© par ou √≠mpar.
‚Üí Utilize uma fun√ß√£o aninhada para verificar a paridade.

5. Escreva uma fun√ß√£o que imprima um menu (ex: "1 - Iniciar", "2 - Sair").
‚Üí Encapsule o print() dentro de uma fun√ß√£o mostrar_menu() sem argumentos.

6. Crie uma fun√ß√£o que receba um nome e um n√∫mero de vezes, e imprima a sauda√ß√£o repetida aquele n√∫mero de vezes.
‚Üí Fa√ßa o argumento vezes ter valor padr√£o 1.

7. Escreva uma fun√ß√£o calcular_pagamento que receba valor da hora, horas trabalhadas e b√¥nus.
‚Üí Deixe b√¥nus=0 como argumento padr√£o.
‚Üí Retorne o valor total pago.

8. Crie uma fun√ß√£o calculadora com comportamento diferente dependendo do operador fornecido.
‚Üí Ex: calculadora(5, 3, operacao='subtracao')
‚Üí Use argumentos nomeados e uma fun√ß√£o aninhada para cada opera√ß√£o.


9. Crie uma fun√ß√£o contador que cont√©m uma fun√ß√£o aninhada incrementar().
‚Üí incrementar() deve acessar uma vari√°vel local ao escopo da fun√ß√£o contador e somar 1 a cada chamada.
‚Üí Retorne incrementar como fun√ß√£o (fun√ß√£o retornando fun√ß√£o).

10. Implemente uma fun√ß√£o fabrica_mensagens que receba um prefixo como argumento e retorne uma nova fun√ß√£o.
‚Üí Essa nova fun√ß√£o deve receber uma mensagem e imprimir:
<prefixo>: <mensagem>
‚Üí Exemplo:

erro = fabrica_mensagens("ERRO")
erro("Arquivo n√£o encontrado")  # ERRO: Arquivo n√£o encontrado



"""

# Quest√£o 1
# Crie uma fun√ß√£o que receba dois n√∫meros e retorne a soma deles
def soma(a, b):
    print(f"A soma de {a = }, {b = }: = {a + b}")

# Exemplos:
soma(1, 3)

# Quest√£o 2
# Crie uma fun√ß√£o que receba um nome e imprima uma sauda√ß√£o personalizada
# Use um argumento padr√£o para o nome ("visitante").

def saudacao(nome='Visitante', msg='Ol√°'):
    print(msg, nome,"!")

saudacao("Alexandre")
saudacao()

# Quest√£o 3
# Crie uma fun√ß√£o que receba tr√™s n√∫meros e retorne a m√©dia.
# ‚Üí Use print() para exibir a m√©dia com duas casas decimais.
def media(a, b, c):
    media = (a + b + c)/3
    print(f"A m√©dia entre: {a=}, {b=}, {c=} √© igual a: {media:.2f}")

media(1, 2, 3)

# Quest√£o 4
# Crie uma fun√ß√£o chamada par_ou_impar que receba um n√∫mero e diga se ele √© par ou √≠mpar.
# ‚Üí Utilize uma fun√ß√£o aninhada para verificar a paridade.

def par_ou_impar(number):
    def paridade():
        if number % 2 == 0:
            return "√© um n√∫mero par"
        else:
            return "√© um n√∫mero √≠mpar"
    return f"O n√∫mero {number} {paridade()}"

print(par_ou_impar(2))


# Quest√£o 5
#  Escreva uma fun√ß√£o que imprima um menu (ex: "1 - Iniciar", "2 - Sair").
# ‚Üí Encapsule o print() dentro de uma fun√ß√£o mostrar_menu() sem argumentos.

def mostrar_menu():
    print("===== MENU PRINCIPAL =====")
    print("1 - Iniciar")
    print("2 - Sair")
    print("==========================")
mostrar_menu()

# Quest√£o 6 
# Crie uma fun√ß√£o que receba um nome e um n√∫mero de vezes, e imprima a sauda√ß√£o repetida aquele n√∫mero de vezes.
# ‚Üí Fa√ßa o argumento vezes ter valor padr√£o 1.

def saudacao_repetida(nome, xvezes=1):
    msg = f'Ol√° {nome}\n' * xvezes
    return msg.rstrip()
print(saudacao_repetida('Alexandre', 3)) 
    
# Quest√£o 7
# Escreva uma fun√ß√£o calcular_pagamento que receba valor da hora, horas trabalhadas e b√¥nus.
# ‚Üí Deixe b√¥nus=0 como argumento padr√£o.
# ‚Üí Retorne o valor total pago.

def calcular_pagamento(valor_hora, horas_trabalhadas, bonus=0):
    total = (valor_hora * horas_trabalhadas) + bonus
    return total

total_pago = calcular_pagamento(20, 220)
print(f'O valor total pago √© de: R${total_pago:.2f}')

# Quest√£o 8
#  Crie uma fun√ß√£o calculadora com comportamento diferente dependendo do operador fornecido.
# ‚Üí Ex: calculadora(5, 3, operacao='subtracao')
# ‚Üí Use argumentos nomeados e uma fun√ß√£o aninhada para cada opera√ß√£o.

def calculadora(a, b, operacao='subtracao'):
    
    def adicao():
        return a + b

    def subtracao():
        return a - b

    def multiplicacao():
        return a * b

    def divisao():
        if b != 0:
            return a / b
        else:
            return 'Erro: divis√£o por zero.'
    
    if operacao == 'adicao':
        return f'O resultado da adi√ß√£o √©: {adicao()}'
    elif operacao == 'subtracao':
        return f'O resultado da subtra√ß√£o √©: {subtracao()}'
    elif operacao == 'multiplicacao':
        return f'O resultado da multiplica√ß√£o √©: {multiplicacao()}'
    elif operacao == 'divisao':
        return f'O resultado da divis√£o √©: {divisao()}'
    else:
        return 'Opera√ß√£o inv√°lida.'
    

print(calculadora(10, 5, operacao='adicao'))         
print(calculadora(10, 5, operacao='subtracao'))      
print(calculadora(10, 5, operacao='multiplicacao'))  
print(calculadora(10, 5, operacao='divisao'))        
print(calculadora(10, 0, operacao='divisao')) 



# Quest√£o 9
#  Crie uma fun√ß√£o contador que cont√©m uma fun√ß√£o aninhada incrementar().
# ‚Üí incrementar() deve acessar uma vari√°vel local ao escopo da fun√ß√£o contador e somar 1 a cada chamada.
# ‚Üí Retorne incrementar como fun√ß√£o (fun√ß√£o retornando fun√ß√£o).
def contador():
    x = 0
    def incrementar():
        nonlocal x
        x += 1
        return x
    return incrementar

cont = contador()
for i in range(10):
    print(cont())


# Quest√£o 10
# Implemente uma fun√ß√£o fabrica_mensagens que receba um prefixo como argumento e retorne uma nova fun√ß√£o.
# ‚Üí Essa nova fun√ß√£o deve receber uma mensagem e imprimir:
# <prefixo>: <mensagem>
# ‚Üí Exemplo:
# 
# erro = fabrica_mensagens("ERRO")
# erro("Arquivo n√£o encontrado")  # ERRO: Arquivo n√£o encontrado

def fabrica_mensagens(prefixe):
    def imprime_mensagem(msg):
        print(f'{prefixe}: {msg}')
    return imprime_mensagem

erro = fabrica_mensagens("ERRO")
aviso = fabrica_mensagens("AVISO")

aviso("Voc√™ est√° quase sem espa√ßo!") 
erro("Arquivo n√£o encontrado")    